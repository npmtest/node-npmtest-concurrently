{"/home/travis/build/npmtest/node-npmtest-concurrently/test.js":"/* istanbul instrument in package npmtest_concurrently */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-concurrently/lib.npmtest_concurrently.js":"/* istanbul instrument in package npmtest_concurrently */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_concurrently = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_concurrently = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-concurrently/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-concurrently && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_concurrently */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_concurrently\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_concurrently.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_concurrently.rollup.js'] =\n            local.assetsDict['/assets.npmtest_concurrently.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_concurrently.__dirname +\n                    '/lib.npmtest_concurrently.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-concurrently/concurrently/src/main.js":"#!/usr/bin/env node\n\nvar Rx = require('rx');\nvar path = require('path');\nvar formatDate = require('date-fns/format');\nvar program = require('commander');\nvar _ = require('lodash');\nvar treeKill = require('tree-kill');\nvar chalk = require('chalk');\nvar spawn = require('spawn-command');\nvar supportsColor = require('supports-color');\nvar IS_WINDOWS = /^win/.test(process.platform);\n\nvar config = {\n    // Kill other processes if one dies\n    killOthers: false,\n\n    // Kill other processes if one exits with non zero status code\n    killOthersOnFail: false,\n\n    // Return success or failure of the 'first' child to terminate, the 'last' child,\n    // or succeed only if 'all' children succeed\n    success: 'all',\n\n    // Prefix logging with pid\n    // Possible values: 'pid', 'none', 'time', 'command', 'index', 'name'\n    prefix: 'index',\n\n    // List of custom names to be used in prefix template\n    names: '',\n\n    // What to split the list of custom names on\n    nameSeparator: ',',\n\n    // Comma-separated list of chalk color paths to use on prefixes.\n    prefixColors: 'gray.dim',\n\n    // moment/date-fns format\n    timestampFormat: 'YYYY-MM-DD HH:mm:ss.SSS',\n\n    // How many characters to display from start of command in prefix if\n    // command is defined. Note that also '..' will be added in the middle\n    prefixLength: 10,\n\n    // By default, color output\n    color: true,\n\n    // If true, the output will only be raw output of processes, nothing more\n    raw: false\n};\n\nfunction main() {\n    var firstBase = path.basename(process.argv[0]);\n    var secondBase = path.basename(process.argv[1]);\n    if (firstBase === 'concurrent' || secondBase === 'concurrent') {\n        console.error('Warning: \"concurrent\" command is deprecated, use \"concurrently\" instead.\\n');\n    }\n\n    parseArgs();\n    config = mergeDefaultsWithArgs(config);\n    run(program.args);\n}\n\nfunction parseArgs() {\n    program\n        .version(require('../package.json').version)\n        .usage('[options] <command ...>')\n        .option(\n            '-k, --kill-others',\n            'kill other processes if one exits or dies'\n        )\n        .option(\n            '--kill-others-on-fail',\n            'kill other processes if one exits with non zero status code'\n        )\n        .option(\n            '--no-color',\n            'disable colors from logging'\n        )\n        .option(\n            '-p, --prefix <prefix>',\n            'prefix used in logging for each process.\\n' +\n            'Possible values: index, pid, time, command, name, none, or a template. Default: ' +\n            config.prefix + '. Example template: \"{time}-{pid}\"\\n'\n        )\n        .option(\n            '-n, --names <names>',\n            'List of custom names to be used in prefix template.\\n' +\n            'Example names: \"main,browser,server\"\\n'\n        )\n        .option(\n            '--name-separator <char>',\n            'The character to split <names> on.\\n' +\n            'Default: \"' + config.nameSeparator + '\". Example usage: ' +\n            'concurrently -n \"styles,scripts|server\" --name-separator \"|\" <command ...>\\n'\n        )\n        .option(\n            '-c, --prefix-colors <colors>',\n            'Comma-separated list of chalk colors to use on prefixes. If there are more commands than colors, the last color will be repeated.\\n' +\n            'Available modifiers: reset, bold, dim, italic, underline, inverse, hidden, strikethrough\\n' +\n            'Available colors: black, red, green, yellow, blue, magenta, cyan, white, gray\\n' +\n            'Available background colors: bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite\\n' +\n            'See https://www.npmjs.com/package/chalk for more information.\\n' +\n            'Default: \"' + config.prefixColors + '\". Example: \"black.bgWhite,cyan,gray.dim\"\\n'\n        )\n        .option(\n            '-t, --timestamp-format <format>',\n            'specify the timestamp in moment/date-fns format. Default: ' +\n            config.timestampFormat + '\\n'\n        )\n        .option(\n            '-r, --raw',\n            'output only raw output of processes,' +\n            ' disables prettifying and concurrently coloring'\n        )\n        .option(\n            '-s, --success <first|last|all>',\n            'Return exit code of zero or one based on the success or failure ' +\n            'of the \"first\" child to terminate, the \"last\" child, or succeed ' +\n            ' only if \"all\" child processes succeed. Default: ' +\n            config.success + '\\n'\n        )\n        .option(\n            '-l, --prefix-length <length>',\n            'limit how many characters of the command is displayed in prefix.\\n' +\n            'The option can be used to shorten long commands.\\n' +\n            'Works only if prefix is set to \"command\". Default: ' +\n            config.prefixLength + '\\n'\n        );\n\n    program.on('--help', function() {\n        var help = [\n            '  Examples:',\n            '',\n            '   - Kill other processes if one exits or dies',\n            '',\n            '       $ concurrently --kill-others \"grunt watch\" \"http-server\"',\n            '',\n            '   - Kill other processes if one exits with non zero status code',\n            '',\n            '       $ concurrently --kill-others-on-fail \"npm run build:client\" \"npm run build:server\"',\n            '',\n            '   - Output nothing more than stdout+stderr of child processes',\n            '',\n            '       $ concurrently --raw \"npm run watch-less\" \"npm run watch-js\"',\n            '',\n            '   - Normal output but without colors e.g. when logging to file',\n            '',\n            '       $ concurrently --no-color \"grunt watch\" \"http-server\" > log',\n            '',\n            '   - Custom prefix',\n            '',\n            '       $ concurrently --prefix \"{time}-{pid}\" \"npm run watch\" \"http-server\"',\n            '',\n            '   - Custom names and colored prefixes',\n            '',\n            '       $ concurrently --prefix \"[{name}]\" --names \"HTTP,WATCH\" -c \"bgBlue.bold,bgMagenta.bold\" \"npm run watch\" \"http-server\"',\n            ''\n        ];\n        console.log(help.join('\\n'));\n\n        var url = 'https://github.com/kimmobrunfeldt/concurrently';\n        console.log('  For more details, visit ' + url);\n        console.log('');\n    });\n\n    program.parse(process.argv);\n}\n\nfunction mergeDefaultsWithArgs(config) {\n    // This will pollute config object with other attributes from program too\n    return _.merge(config, program);\n}\n\nfunction stripCmdQuotes(cmd) {\n    // Removes the quotes surrounding a command.\n    if (cmd[0] === '\"' || cmd[0] === '\\'') {\n        return cmd.substr(1, cmd.length - 2);\n    } else {\n        return cmd;\n    }\n}\n\nfunction run(commands) {\n    var childrenInfo = {};\n    var lastPrefixColor = _.get(chalk, chalk.gray.dim);\n    var prefixColors = config.prefixColors.split(',');\n    var names = config.names.split(config.nameSeparator);\n    var children = _.map(commands, function(cmd, index) {\n        // Remove quotes.\n        cmd = stripCmdQuotes(cmd);\n\n        var spawnOpts = config.raw ? {stdio: 'inherit'} : {};\n        if (IS_WINDOWS) {\n            spawnOpts.detached = false;\n        }\n        if (supportsColor) {\n          spawnOpts.env = Object.assign({FORCE_COLOR: supportsColor.level}, process.env)\n        }\n\n        var child;\n        try {\n            child = spawn(cmd, spawnOpts);\n        } catch (e) {\n            logError('', chalk.gray.dim, 'Error occured when executing command: ' + cmd);\n            logError('', chalk.gray.dim, e.stack);\n            process.exit(1);\n        }\n\n        if (index < prefixColors.length) {\n            var prefixColorPath = prefixColors[index];\n            lastPrefixColor = _.get(chalk, prefixColorPath, chalk.gray.dim);\n        }\n\n        var name = index < names.length ? names[index] : '';\n        childrenInfo[child.pid] = {\n            command: cmd,\n            index: index,\n            name: name,\n            prefixColor: lastPrefixColor\n        };\n        return child;\n    });\n\n    // Transform all process events to rx streams\n    var streams = _.map(children, function(child) {\n        var childStreams = {\n            error: Rx.Node.fromEvent(child, 'error'),\n            close: Rx.Node.fromEvent(child, 'close')\n        };\n        if (!config.raw) {\n            childStreams.stdout = Rx.Node.fromReadableStream(child.stdout);\n            childStreams.stderr = Rx.Node.fromReadableStream(child.stderr);\n        }\n\n        return _.reduce(childStreams, function(memo, stream, key) {\n            memo[key] = stream.map(function(data) {\n                return {child: child, data: data};\n            });\n\n            return memo;\n        }, {});\n    });\n\n    handleClose(streams, children, childrenInfo);\n    handleError(streams, childrenInfo);\n    if (!config.raw) {\n        handleOutput(streams, childrenInfo, 'stdout');\n        handleOutput(streams, childrenInfo, 'stderr');\n    }\n\n    ['SIGINT', 'SIGTERM'].forEach(function(signal) {\n      process.on(signal, function() {\n        children.forEach(function(child) {\n          treeKill(child.pid, signal);\n        });\n      });\n    });\n}\n\nfunction handleOutput(streams, childrenInfo, source) {\n    var sourceStreams = _.map(streams, source);\n    var combinedSourceStream = Rx.Observable.merge.apply(this, sourceStreams);\n\n    combinedSourceStream.subscribe(function(event) {\n        var prefix = getPrefix(childrenInfo, event.child);\n        var prefixColor = childrenInfo[event.child.pid].prefixColor;\n        log(prefix, prefixColor, event.data.toString());\n    });\n}\n\nfunction handleClose(streams, children, childrenInfo) {\n    var aliveChildren = _.clone(children);\n    var exitCodes = [];\n    var closeStreams = _.map(streams, 'close');\n    var closeStream = Rx.Observable.merge.apply(this, closeStreams);\n    var othersKilled = false\n\n    // TODO: Is it possible that amount of close events !== count of spawned?\n    closeStream.subscribe(function(event) {\n        var exitCode = event.data;\n        var nonSuccess = exitCode !== 0;\n        exitCodes.push(exitCode);\n\n        var prefix = getPrefix(childrenInfo, event.child);\n        var prefixColor = childrenInfo[event.child.pid].prefixColor;\n        var command = childrenInfo[event.child.pid].command;\n        logEvent(prefix, prefixColor, command + ' exited with code ' + exitCode);\n\n        aliveChildren = _.filter(aliveChildren, function(child) {\n            return child.pid !== event.child.pid;\n        });\n\n        if (aliveChildren.length === 0) {\n            exit(exitCodes);\n        }\n        if (!othersKilled) {\n          if (config.killOthers) {\n            killOtherProcesses(aliveChildren);\n            othersKilled = true;\n          } else if (config.killOthersOnFail && nonSuccess) {\n            killOtherProcesses(aliveChildren);\n            othersKilled = true;\n          }\n        }\n    });\n}\n\nfunction killOtherProcesses(processes) {\n    logEvent('--> ', chalk.gray.dim, 'Sending SIGTERM to other processes..');\n\n    // Send SIGTERM to alive children\n    _.each(processes, function(child) {\n        treeKill(child.pid, 'SIGTERM');\n    });\n}\n\nfunction exit(childExitCodes) {\n    var success;\n    switch (config.success) {\n        case 'first':\n            success = _.first(childExitCodes) === 0;\n            break;\n        case 'last':\n            success = _.last(childExitCodes) === 0;\n            break;\n        default:\n            success = _.every(childExitCodes, function(code) {\n                return code === 0;\n            });\n    }\n    process.exit(success ? 0 : 1);\n}\n\nfunction handleError(streams, childrenInfo) {\n    // Output emitted errors from child process\n    var errorStreams = _.map(streams, 'error');\n    var processErrorStream = Rx.Observable.merge.apply(this, errorStreams);\n\n    processErrorStream.subscribe(function(event) {\n        var command = childrenInfo[event.child.pid].command;\n        logError('', chalk.gray.dim, 'Error occured when executing command: ' + command);\n        logError('', chalk.gray.dim, event.data.stack);\n    });\n}\n\nfunction colorText(text, color) {\n    if (!config.color) {\n        return text;\n    } else {\n        return color(text);\n    }\n}\n\nfunction getPrefix(childrenInfo, child) {\n    var prefixes = getPrefixes(childrenInfo, child);\n    if (_.includes(_.keys(prefixes), config.prefix)) {\n        return '[' + prefixes[config.prefix] + '] ';\n    }\n\n    return _.reduce(prefixes, function(memo, val, key) {\n        var re = new RegExp('{' + key + '}', 'g');\n        return memo.replace(re, val);\n    }, config.prefix) + ' ';\n}\n\nfunction getPrefixes(childrenInfo, child) {\n    var prefixes = {};\n\n    prefixes.none = '';\n    prefixes.pid = child.pid;\n    prefixes.index = childrenInfo[child.pid].index;\n    prefixes.name = childrenInfo[child.pid].name;\n    prefixes.time = formatDate(Date.now(), config.timestampFormat);\n\n    var command = childrenInfo[child.pid].command;\n    prefixes.command = shortenText(command, config.prefixLength);\n    return prefixes;\n}\n\nfunction shortenText(text, length, cut) {\n    if (text.length <= length) {\n        return text;\n    }\n    cut = _.isString(cut) ? cut : '..';\n\n    var endLength = Math.floor(length / 2);\n    var startLength = length - endLength;\n\n    var first = text.substring(0, startLength);\n    var last = text.substring(text.length - endLength, text.length);\n    return first + cut + last;\n}\n\nfunction log(prefix, prefixColor, text) {\n    logWithPrefix(prefix, prefixColor, text);\n}\n\nfunction logEvent(prefix, prefixColor, text) {\n    if (config.raw) return;\n\n    logWithPrefix(prefix, prefixColor, text, chalk.gray.dim);\n}\n\nfunction logError(prefix, prefixColor, text) {\n    // This is for now same as log, there might be separate colors for stderr\n    // and stdout\n    logWithPrefix(prefix, prefixColor, text, chalk.red.bold);\n}\n\nfunction logWithPrefix(prefix, prefixColor, text, color) {\n    var lastChar = text[text.length - 1];\n    if (config.raw) {\n        if (lastChar !== '\\n') {\n            text += '\\n';\n        }\n\n        process.stdout.write(text);\n        return;\n    }\n\n    if (lastChar === '\\n') {\n        // Remove extra newline from the end to prevent extra newlines in input\n        text = text.slice(0, text.length - 1);\n    }\n\n    var lines = text.split('\\n');\n    // Do not bgColor trailing space\n    var coloredPrefix = colorText(prefix.replace(/ $/, ''), prefixColor) + ' ';\n    var paddedLines = _.map(lines, function(line, i) {\n        var coloredLine = color ? colorText(line, color) : line;\n        return coloredPrefix + coloredLine;\n    });\n\n    console.log(paddedLines.join('\\n'));\n}\n\nmain();\n"}